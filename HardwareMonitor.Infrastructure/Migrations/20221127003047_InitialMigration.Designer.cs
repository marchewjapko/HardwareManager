// <auto-generated />
using System;
using HardwareMonitor.RestAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HardwareMonitor.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221127003047_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAuthorised")
                        .HasColumnType("bit");

                    b.Property<string>("SystemMacs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemsInfos");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SystemInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SystemInfoId");

                    b.ToTable("SystemReadings");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemSpecs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CpuCores")
                        .HasColumnType("int");

                    b.Property<string>("CpuInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Disks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkAdapters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OsNameVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemReadingId")
                        .HasColumnType("int");

                    b.Property<double>("TotalMemory")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SystemReadingId")
                        .IsUnique();

                    b.ToTable("SystemSpecs");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BytesReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BytesSent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CpuPerCoreUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CpuTotalUsage")
                        .HasColumnType("float");

                    b.Property<string>("DiskUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MemoryUsage")
                        .HasColumnType("float");

                    b.Property<int>("SystemReadingId")
                        .HasColumnType("int");

                    b.Property<double>("SystemUptime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SystemReadingId")
                        .IsUnique();

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemReading", b =>
                {
                    b.HasOne("HardwareMonitor.Core.Domain.SystemInfo", "SystemInfo")
                        .WithMany("SystemReadings")
                        .HasForeignKey("SystemInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemInfo");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemSpecs", b =>
                {
                    b.HasOne("HardwareMonitor.Core.Domain.SystemReading", "SystemReading")
                        .WithOne("SystemSpecs")
                        .HasForeignKey("HardwareMonitor.Core.Domain.SystemSpecs", "SystemReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemReading");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.Usage", b =>
                {
                    b.HasOne("HardwareMonitor.Core.Domain.SystemReading", "SystemReading")
                        .WithOne("Usage")
                        .HasForeignKey("HardwareMonitor.Core.Domain.Usage", "SystemReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemReading");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemInfo", b =>
                {
                    b.Navigation("SystemReadings");
                });

            modelBuilder.Entity("HardwareMonitor.Core.Domain.SystemReading", b =>
                {
                    b.Navigation("SystemSpecs");

                    b.Navigation("Usage");
                });
#pragma warning restore 612, 618
        }
    }
}
